image: dwmkerr/terraform-ci:latest

variables:
  TF_ROOT: "terraform"
  TF_VAR_aws_access_key: $AWS_ACCESS_KEY_ID
  TF_VAR_aws_secret_key: $AWS_SECRET_ACCESS_KEY
  TF_VAR_aws_region: $AWS_REGION
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_REGION: $AWS_REGION

stages:
  - validate
  - plan
  - apply
  - test
  - destroy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $TF_ROOT/.terraform
    - $TF_ROOT/.terraform.lock.hcl

before_script:
  - cd $TF_ROOT
  - |
    # If you use GitLab module registry, authenticate (required for private modules)
    cat <<EOF > ~/.terraformrc
    credentials "gitlab.com" {
      token = "${CI_JOB_TOKEN}"
    }
    EOF
  - terraform init -input=false

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - $TF_ROOT/tfplan
      - $TF_ROOT/terraform.tfstate

apply:
  stage: apply
  dependencies:
    - plan
  script:
    - terraform apply -input=false tfplan
  artifacts:
    paths:
      - $TF_ROOT/terraform.tfstate
  when: manual

test:
  stage: test
  dependencies:
    - apply
  script: |
    terraform init -input=false
    export ALB_DNS_NAME=$(terraform output alb_dns_name | tr -d '"')
    echo "ALB_DNS_NAME is: $ALB_DNS_NAME"
    if [ -z "$ALB_DNS_NAME" ]; then
      echo "Error: ALB_DNS_NAME is empty! Check Terraform outputs and ensure apply stage ran successfully."
      exit 1
    fi
    curl -f "http://$ALB_DNS_NAME/" || (echo "App test failed!" && exit 1)
  when: manual

destroy:
  stage: destroy
  dependencies:
    - apply
  script:
    - terraform init -input=false
    - echo "Listing resources in state:"
    - terraform state list || echo "No resources found in state."
    - terraform destroy -auto-approve -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_region=$AWS_REGION"

  when: manual
